math.randomseed(tick())
local Services = setmetatable({}, {__index = function(Self, Index)
	return game:GetService(Index)
end})
local ReplicatedStorage = Services.ReplicatedStorage
local Players = Services.Players
local RunService = Services.RunService
local Workspace = Services.Workspace
local CoreGui = Services.CoreGui
local Camera = Workspace.CurrentCamera
local Player = Players.LocalPlayer
local Client = {
	Break = Workspace.__THINGS.Breakables,
	Orbs = Workspace.__THINGS.Orbs,
	Digsites = Workspace.__THINGS.Digging,
	Gifts = getsenv(Player.PlayerScripts.Scripts.Game["Hidden Gifts"]),
	Relics = getsenv(Player.PlayerScripts.Scripts.Game.Relics),
}
local BlackListed = {}
local Coins = {}
for i,v in next, Client.Break:GetChildren() do
	if v:IsA("Model") and v:GetAttributes().BreakableID and not table.find(Coins, tostring(v:GetAttributes().BreakableID)) then
		table.insert(Coins, tostring(v:GetAttributes().BreakableID))
	end
end
for i,v in next, ReplicatedStorage.Library.Client:GetChildren() do
	Client[v.Name] = require(v)
end

for i,v in next, getgc() do
	if type(v) == "function" and islclosure(v) then
		if getinfo(v).name == "requestRelics" then
			Client.requestRelics = v
		elseif getinfo(v).name == "relicClicked" then
			Client.relicClicked = v
		end
	end
end
Client.Vending = function()
	setthreadcontext(2)
	local HumanoidRootPart = Player.Character.HumanoidRootPart.CFrame
	for i,v in next, ReplicatedStorage.__DIRECTORY.VendingMachines:GetChildren() do
		local Vending = Workspace.MAP:FindFirstChild("Machines", true)[require(v).MachineName].VendingMachine.Screen.SurfaceGui.SoldOut.Visible
		if not Vending then
			wait(1)
			Player.Character.HumanoidRootPart.CFrame = Workspace.MAP:FindFirstChild("Machines", true)[require(v).MachineName].VendingMachine:GetModelCFrame() * CFrame.new(0,0,-10)
			ReplicatedStorage:WaitForChild("Network"):WaitForChild("VendingMachines_Purchase"):InvokeServer(tostring(require(v).MachineName))
			wait(1)
		end
	end
	Player.Character.HumanoidRootPart.CFrame = HumanoidRootPart
	setthreadcontext(8)
end
Client.GrabFruits = function()
	for i,v in next, Client.Break:GetChildren() do
		if v:FindFirstChild("base") then
			local HumanoidRootPart = Player.Character.HumanoidRootPart.CFrame
			Player.Character.HumanoidRootPart.CFrame = v.base.Hitbox.CFrame
			wait()
			Player.Character.HumanoidRootPart.CFrame = HumanoidRootPart
		end
	end
end
Client.AntiAFK = function()
	if Player.Idled then
		for i,v in next, getconnections(Player.Idled) do
			v:Disable()
		end
	end
end
Client.CollectRelics = function()
	for i,v in next, getupvalue(Client.requestRelics, 1) do
		Client.relicClicked(v)
	end
end
Client.CollectGift = function()
	for i,v in next, getupvalue(Client.Gifts.attemptClaim, 4) do
		local PlayerHumanoid = Player.Character.Humanoid.RootPart.CFrame
		Player.Character.Humanoid.RootPart.CFrame = v.Model.Model.CFrame 
		Client.Gifts.attemptClaim(v)
		wait()
		Player.Character.Humanoid.RootPart.CFrame = PlayerHumanoid
	end
end
Client.Nearest = function()
	local Target, MaxDistance = nil, math.huge
	for i,v in next, Client.Break:GetChildren() do
		local click = v:FindFirstChild("ClickDetector", true)
		if v:IsA("Model") and v:FindFirstChildWhichIsA("BasePart") and not table.find(BlackListed, tostring(v:GetAttributes().BreakableID)) then
			local Distance = (v:GetModelCFrame().Position - Player.Character.HumanoidRootPart.Position).magnitude
			if Distance <= MaxDistance then
				MaxDistance = Distance
				Target = v
			end
		end
	end
	return Target
end
Client.Fruit = function()
    if Client.Save.GetSaves()[Player].Inventory.Fruit then
		for i,v in next, Client.Save.GetSaves()[Player].Inventory.Fruit do
			if Client.FruitCmds.GetMaxConsume(i) ~= 0 then
				Client.FruitCmds.Consume(i, 1)
			end
		end
	end
end
Client.Collect = function()
    local FuckYou = Client.Orbs:GetChildren()
    local MyOrbs = {}
    if FuckYou and #FuckYou > 10 then
        for i,v in next, FuckYou do
            MyOrbs[i] = tonumber(v.Name)
            v:Destroy()
        end
		ReplicatedStorage:WaitForChild("Network"):WaitForChild("Orbs: Collect"):FireServer(MyOrbs)
    end
end

Client.settarget = function(Coin)
	if Coin then
		for i,v in next, Client.PlayerPet.GetAll() do
			if tostring(v.owner) == Player.Name then
				Client.PlayerPet.SetTarget(v, Coin)
			end
		end
	end
end

Client.Dig = function()
	local Pets = {}
	for i,v in next, Client.PlayerPet.GetAll() do
		if tostring(v.owner) == Player.Name then
			for i2,v2 in next, getupvalue(Client.DiggingCmds.Target, 1) do
				ReplicatedStorage:WaitForChild("Network"):WaitForChild("Digging_Target"):InvokeServer(tonumber(v2.uid), tostring(v.euid))
				ReplicatedStorage:WaitForChild("Network"):WaitForChild("Digging_Claim"):InvokeServer(tonumber(v2.uid))
			end
		end
	end
end
Client.Potion = function()
	if Client.Save.GetSaves()[Player].Inventory.Consumable then
		for i,v in next, Client.Save.GetSaves()[Player].Inventory.Consumable do
			ReplicatedStorage:WaitForChild("Network"):WaitForChild("Consumables_Consume"):InvokeServer(i, 1)
		end
	end
end

Client.Roll = function()
	ReplicatedStorage:WaitForChild("Network"):WaitForChild("Eggs_Roll"):InvokeServer()
end

Client.Relics = function()
    if v then
        for i,v in next, getupvalue(getsenv(Player.PlayerScripts.Scripts.Game.Relics).RequestRelics,1) do
            if v.Model == v then
                return v
            end
        end
    end
end

Client.Upgrade = function()
	for i,v in next, getupvalue(Client.UpgradeCmds.IsUnlocked, 2) do
		if not Client.UpgradeCmds.IsUnlocked(i) then
			Client.UpgradeCmds.Unlock(i)
		end
	end
end
Client.AutoCraft = function()
	for i=1, 22 do
		ReplicatedStorage:WaitForChild("Network"):WaitForChild("CraftingMachine_Craft"):InvokeServer("PotionCraftingMachine", i)
	end
end
local Speed = Client.PlayerPet.CalculateSpeedMultiplier
Client.PlayerPet.CalculateSpeedMultiplier = function(...)
	if not Speedy then
		return Speed(...)
	else
		return math.huge
	end
end
spawn(function()
	while wait(5) do
		if Upgrade then
			Client.Upgrade()
		end
		if AutoCraft then
			Client.AutoCraft()
		end
	end
end)
spawn(function()
	while wait() do
		if Vending then
			Client.Vending()
		end
		if GrabFruits then
			Client.GrabFruits()
		end
		if Roll then
			Client.Roll()
		end
		if Potion then
			Client.Potion()
		end
		if Dig then
			Client.Dig()
		end
		if Collect then
			Client.Collect()
		end
		if Breakables then
			Client.settarget(Client.Nearest())
		end
		if Fruit then
			Client.Fruit()
		end
		if Gifts then
			Client.CollectGift()
		end
		if Relics then
			Client.CollectRelics()
		end
	end
end)
Client.AntiAFK()
local Atlas = loadstring(game:HttpGet("https://raw.githubusercontent.com/JixSo-48/CodeNest/refs/heads/main/UI/Atlas_UI_Library"))()
local UI = Atlas.new({
    Name = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name;
    ConfigFolder = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name;
    Credit = "DekuDimz Script developer | UI Made By RoadToGlory#9879"; -- text to appear if player presses the "i" button on their UI (optional)
    Color = Color3.fromRGB(255,0,0); -- theme color for UI (required)
    Bind = "Delete"; -- keybind for toggling the UI, must be a valid KeyCode name
    -- Atlas Loader:
    UseLoader = false; -- whether to use Atlas Loader or not, if set to false than CheckKey and Discord are ignored
    FullName = "CodeNest"; -- works if UseLoader is set to true, can be same as Name argument, shown on loader frame
    CheckKey = function(inputtedKey) -- works if UseLoader is set to true, where inputtedKey is the key inputted by the player
        return true
    end;
    Discord = ""; -- works if UseLoader is set to true, will be copied to clipboard if player presses "Copy Invite" button
})
local Basic = UI:CreatePage("AutoFarm")
local Misc = Basic:CreateSection("Features")

local hello = UI:CreatePage("Destroy UI")
local Nig = hello:CreateSection("Destroy")
local Item = Misc:CreateDropdown({ 
	Name = "Coin types"; -- required: name of element
	Callback = function(v) 
		table.insert(BlackListed, v) 
	end;
	Options = Coins;
	ItemSelecting = true; 
	DefaultItemSelected = "";
	Warning = "This has a warning";
	WarningIcon = 12345;
})
local Item2 = Misc:CreateDropdown({ 
	Name = "BlackListed Coin Types"; -- required: name of element
	Callback = function(v) 
		table.remove(BlackListed, tonumber(v))
	end;
	Options = BlackListed;
	ItemSelecting = true; 
	DefaultItemSelected = "";
	Warning = "This has a warning";
	WarningIcon = 12345;
})
spawn(function()
	while wait() do  
		for i,v in next, Client.Break:GetChildren() do
			if v:IsA("Model") and v:GetAttributes().BreakableID and not table.find(Coins, tostring(v:GetAttributes().BreakableID)) then
				table.insert(Coins, tostring(v:GetAttributes().BreakableID))
			end
		end
		Item:Update(Coins)
		Item2:Update(BlackListed)
		wait()
	end
end)

Misc:CreateToggle({Name = "Auto Craft Pots"; Flag = "asddfgdfgfsdfdfdsfdsf"; Default = false;
	Callback = function(Value)
		AutoCraft = Value
	end;
	Warning = "";
	WarningIcon = 12345; 
    CallbackOnCreation = true;
})
Misc:CreateToggle({Name = "Auto Roll"; Flag = "asdfsdfdfdsfdsf"; Default = false;
	Callback = function(Value)
		Roll = Value
	end;
	Warning = "";
	WarningIcon = 12345; 
    CallbackOnCreation = true;
})

Misc:CreateToggle({Name = "Auto Grab Spawned Fruits"; Flag = "asdffsdfdfdsfdsf"; Default = false;
	Callback = function(Value)
		GrabFruits = Value
	end;
	Warning = "";
	WarningIcon = 12345; 
    CallbackOnCreation = true;
})

Misc:CreateToggle({Name = "Auto Vending Machine"; Flag = "asdffsdcxfdfdsfdsf"; Default = false;
	Callback = function(Value)
		Vending = Value
	end;
	Warning = "";
	WarningIcon = 12345; 
    CallbackOnCreation = true;
})

Misc:CreateToggle({Name = "Auto Gifts"; Flag = "asdfgdgdffsdfdfdsfdsf"; Default = false;
	Callback = function(Value)
		Gifts = Value
	end;
	Warning = "";
	WarningIcon = 12345; 
    CallbackOnCreation = true;
})

Misc:CreateToggle({Name = "Auto Eat Fruits"; Flag = "asdfsdfdsf"; Default = false;
	Callback = function(Value)
		Fruit = Value
	end;
	Warning = "";
	WarningIcon = 12345; 
    CallbackOnCreation = true;
})

Misc:CreateToggle({Name = "Auto Use Potions"; Flag = "asdfshgfhdfdsf"; Default = false;
	Callback = function(Value)
		Potion = Value
	end;
	Warning = "";
	WarningIcon = 12345; 
    CallbackOnCreation = true;
})

Misc:CreateToggle({Name = "Auto Dig"; Flag = "a"; Default = false;
	Callback = function(Value)
		Dig = Value
	end;
	Warning = "";
	WarningIcon = 12345; 
    CallbackOnCreation = true;
})

Misc:CreateToggle({Name = "Auto Breakables"; Flag = "ab"; Default = false;
	Callback = function(Value)
		Breakables = Value
	end;
	Warning = "";
	WarningIcon = 12345; 
    CallbackOnCreation = true;
})

Misc:CreateToggle({Name = "Auto Collect"; Flag = "abc"; Default = false;
	Callback = function(Value)
		Collect = Value
	end;
	Warning = "";
	WarningIcon = 12345; 
    CallbackOnCreation = true;
})

Misc:CreateToggle({Name = "Auto Upgrade"; Flag = "abcd"; Default = false;
	Callback = function(Value)
		Upgrade = Value
	end;
	Warning = "";
	WarningIcon = 12345; 
    CallbackOnCreation = true;
})

Misc:CreateToggle({Name = "Pet Infinite Speed"; Flag = "abcde"; Default = false;
	Callback = function(Value)
		Speedy = Value
	end;
	Warning = "";
	WarningIcon = 12345; 
    CallbackOnCreation = true;
})

Misc:CreateToggle({Name = "Auto Relics"; Flag = "abcdfsdfsdfe"; Default = false;
	Callback = function(Value)
		Relics = Value
	end;
	Warning = "";
	WarningIcon = 12345; 
    CallbackOnCreation = true;
})

Nig:CreateButton({
	Name = "Destroy?"; -- required: name of element
	Callback = function()  -- required: function to be called when button is pressed
		UI:Destroy()
	end
})
