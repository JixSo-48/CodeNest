math.randomseed(tick())
local Services = setmetatable({}, {__index = function(Self, Index)
    return game:GetService(Index)
end})
local wait = task.wait
local spawn = task.spawn
local ReplicatedStorage = Services.ReplicatedStorage
local Players = Services.Players
local RunService = Services.RunService
local Workspace = Services.Workspace
local CoreGui = Services.CoreGui
local Camera = Workspace.CurrentCamera
local Player = Players.LocalPlayer
local Client = {
    Break = Workspace.__THINGS.Breakables,
    Orbs = Workspace.__THINGS.Orbs,
    Digsites = Workspace.__THINGS.Digging,
    FlyingGifts = Workspace.__THINGS.FlyingGifts,
    Gifts = getsenv(Player.PlayerScripts.Scripts.Game["Hidden Gifts"]),
    Relics = getsenv(Player.PlayerScripts.Scripts.Game.Relics),
    Network = require(ReplicatedStorage.Library.Client.Network),
}
local BlackListed = {}
local Coins = {}
for i,v in next, Client.Break:GetChildren() do
    if v:IsA("Model") and v:GetAttributes().BreakableID and not table.find(Coins, tostring(v:GetAttributes().BreakableID)) then
        table.insert(Coins, tostring(v:GetAttributes().BreakableID))
    end
end
for i,v in next, ReplicatedStorage.Library.Client:GetChildren() do
    Client[v.Name] = require(v)
end

for i,v in next, getgc(true) do
    if type(v) == "table" then
        if rawget(v, "Click") then
            Client.ClickBreakable = v.Click
        end
    end
    if type(v) == "function" and islclosure(v) then
        if getinfo(v).name == "requestRelics" then
            Client.requestRelics = v
        elseif getinfo(v).name == "relicClicked" then
            Client.relicClicked = v
        elseif getfenv(v).script == Player.PlayerScripts.Scripts.Game.Fishing then
            if debug.info(v, "n") == "startFishing" then
                Client.startFishing = v
            elseif debug.info(v, "n") == "stopFishing" then
                Client.stopFishing = v
                Client.Old = v
            end
        elseif getfenv(v).script == Player.PlayerScripts.Scripts.Game["Flying Gifts"] then
            if debug.info(v, "n") == "claim" then
                Client.Claim = v
            end
        end
    end
end
Client.FireServer = function(Remote, ...)
    Client.Network.Fire(Remote, unpack(...))
end

Client.InvokeServer = function(Remote, ...)
    Client.Network.Invoke(Remote, unpack(...))
end

Client.PurchaseFish = function()
    local Re = Player.Character.Humanoid.RootPart.CFrame
    Player.Character.Humanoid.RootPart.CFrame = Workspace.MAP.PARTS.Platforms.FishingMerchant.Lock.CFrame
    Client.TabController.OpenTab("CustomMerchant")
    for i,v in next, Player.PlayerGui._MACHINES.CustomMerchant.Frame.ItemsFrame.Items:GetChildren() do
        if v.Name == "CustomSlot" and v:FindFirstChild("Locked") and not v.Locked.Visible then
            if v.Buy.Cost.Amount.Text ~= "Sold Out" then wait()
                for i,v in next, getconnections(v.Buy.Activated) do
                    v.Function()
                end
            end
        end
    end
    Client.TabController.CloseTab("CustomMerchant")
    Player.Character.Humanoid.RootPart.CFrame = Re * CFrame.new(0,1,0)
end

Client.Bloons = function()
    for i,v in next, Client.FlyingGifts:GetChildren() do
        if v:IsA("Model") and v:FindFirstChild("Giftbox") and v.Giftbox.Transparency == 0 then
            if v.Giftbox:GetAttributes().FlyingGiftUID then wait()
                Client.Claim(v.Giftbox:GetAttributes().FlyingGiftUID)
            end
        end
    end
end

Client.Merchant = function()
    for i=1, 6 do
        Client.InvokeServer("CustomMerchants_Purchase", {"StandardMerchant",i})
    end
end

Client.Vending = function()
    local HumanoidRootPart = Player.Character.HumanoidRootPart.CFrame
    for i,v in next, ReplicatedStorage.__DIRECTORY.VendingMachines:GetChildren() do
        local Vending = Workspace.MAP:FindFirstChild("Machines", true)
        if Vending and Vending:FindFirstChild(require(v).MachineName) and not Vending[require(v).MachineName].VendingMachine.Screen.SurfaceGui.SoldOut.Visible then
            Player.Character.HumanoidRootPart.CFrame = Workspace.MAP:FindFirstChild("Machines", true)[require(v).MachineName].VendingMachine:GetModelCFrame() * CFrame.new(0,0,-15)
            for i=1, 5 do
                Client.InvokeServer("VendingMachines_Purchase", {require(v).MachineName})
            end
            wait()
        end
    end
    Player.Character.HumanoidRootPart.CFrame = HumanoidRootPart
end

Client.GrabFruits = function()
    for i,v in next, Client.Break:GetChildren() do
        if v:FindFirstChild("base") then
            local HumanoidRootPart = Player.Character.HumanoidRootPart.CFrame
            Player.Character.HumanoidRootPart.CFrame = v.base.Hitbox.CFrame
            wait()
            Player.Character.HumanoidRootPart.CFrame = HumanoidRootPart
        end
    end
end

Client.AntiAFK = function()
    if Player.Idled then
        for i,v in next, getconnections(Player.Idled) do
            v:Disable()
        end
    end
end

Client.CollectRelics = function()
    for i,v in next, getupvalue(Client.requestRelics, 1) do
        Client.relicClicked(v)
    end
end

Client.CollectGift = function()
    local PlayerHumanoid = Player.Character.Humanoid.RootPart.CFrame
    for i,v in next, getupvalue(Client.Gifts.attemptClaim, 4) do
        Player.Character.Humanoid.RootPart.CFrame = v.Model.Model.CFrame * CFrame.new(Vector3.new(0,5,0))
        for i=1, 5 do
            Client.Gifts.attemptClaim(v)
        end
    end
    Player.Character.Humanoid.RootPart.CFrame = PlayerHumanoid
end

Client.Nearest = function()
    local Target, MaxDistance = nil, math.huge
    for i,v in next, Client.Break:GetChildren() do
        local click = v:FindFirstChild("ClickDetector", true)
        if v:IsA("Model") and v:FindFirstChildWhichIsA("BasePart") and not table.find(BlackListed, tostring(v:GetAttributes().BreakableID)) then
            local Distance = (v:GetModelCFrame().Position - Player.Character.HumanoidRootPart.Position).magnitude
            if Distance <= MaxDistance then
                MaxDistance = Distance
                Target = v
            end
        end
    end
    return Target
end

Client.Fruit = function()
    if Client.Save.GetSaves()[Player].Inventory.Fruit then
        for i,v in next, Client.Save.GetSaves()[Player].Inventory.Fruit do
            if Client.FruitCmds.GetMaxConsume(i) ~= 0 then
                Client.FruitCmds.Consume(i, 1)
            end
        end
    end
end

Client.Collect = function()
    local FuckYou = Client.Orbs:GetChildren()
    local MyOrbs = {}
    if FuckYou and #FuckYou > 10 then
        for i,v in next, FuckYou do
            MyOrbs[i] = tonumber(v.Name)
            v:Destroy()
        end
        Client.FireServer("Orbs: Collect", {MyOrbs})
    end
end

Client.settarget = function(Coin)
    if Coin then
        Client.ClickBreakable:FireServer("Coin")
        for i,v in next, Client.PlayerPet.GetAll() do
            if tostring(v.owner) == Player.Name then
                Client.PlayerPet.SetTarget(v, Coin)
            end
        end
    end
end

Client.Fish = function()
    local H = Workspace.MAP.INTERACT:FindFirstChild("FishingPads")
    if not Player.PlayerGui.Main.Left["Fishing Desktop"].Visible then
        Client.startFishing(Workspace.MAP.INTERACT.FishingPads.FishingBillboard)
    end
    Client.InvokeServer("Fishing_Fish", {})
    wait()
    Client.FireServer("Fishing_Success", {})
    if not StartFishing and Player.PlayerGui.Main.Left["Fishing Desktop"].Visible then
        Client.Old()
    end
end

Client.Dig = function()
    local Pets = {}
    for i,v in next, Client.PlayerPet.GetAll() do
        if tostring(v.owner) == Player.Name then
            for i2,v2 in next, getupvalue(Client.DiggingCmds.Target, 1) do
                Client.InvokeServer("Digging_Target", {tonumber(v2.uid), tostring(v.euid)})
                Client.InvokeServer("Digging_Claim", {tonumber(v2.uid)})
            end
        end
    end
end

Client.Potion = function()
    if Client.Save.GetSaves()[Player].Inventory.Consumable then
        for i,v in next, Client.Save.GetSaves()[Player].Inventory.Consumable do
            Client.InvokeServer("Consumables_Consume",{i, 1})
        end
    end
end

Client.Upgrade = function()
    for i,v in next, getupvalue(Client.UpgradeCmds.IsUnlocked, 2) do
        if not Client.UpgradeCmds.IsUnlocked(i) then
            Client.UpgradeCmds.Unlock(i)
        end
    end
end

Client.AutoCraft = function()
    local PlayerHumanoid = Player.Character.Humanoid.RootPart.CFrame
    if Workspace.MAP.INTERACT.Machines:FindFirstChild("PotionCraftingMachine") then
        Player.Character.Humanoid.RootPart.CFrame = Workspace.MAP.INTERACT.Machines.PotionCraftingMachine:GetModelCFrame() * CFrame.new(0,0,-15)
        for i=1, 50 do
            Client.InvokeServer("CraftingMachine_Craft", {"PotionCraftingMachine", i, math.round(Client.PotionAmount) or 1})
        end
    end
    Player.Character.Humanoid.RootPart.CFrame = PlayerHumanoid
end

local Speed = Client.PlayerPet.CalculateSpeedMultiplier
Client.PlayerPet.CalculateSpeedMultiplier = function(...)
    if not Speedy then
        return Speed(...)
    else
        return math.huge
    end
end

local Old = Client.stopFishing
local L = Client.stopFishing
L = hookfunction(Client.stopFishing, function(...)
    if StartFishing then
        return
    else
        return L(...)
    end
end)

RunService.Heartbeat:Connect(function()
    if Collect then
        Client.Collect()
    end
    if Breakables then
        Client.settarget(Client.Nearest())
    end
    if Roll3 then
        Client.InvokeServer("Eggs_Roll", {})
    end
    if StartFishing then
        Client.Fish()
    end
    if Bloons then
        Client.Bloons()
    end
end)

spawn(function()
    while wait(5) do
        local A, B = pcall(function()
            if Upgrade then
                Client.Upgrade()
            end
            if AutoCraft then
                Client.AutoCraft()
            end
            if Vending then
                Client.Vending()
            end
            if FishMerchant then
                Client.PurchaseFish()
            end
        end)
        if not A then
            print(B)
        end
    end
end)

spawn(function()
    while wait() do
        local A, B = pcall(function()
            Player.PlayerScripts.Scripts.Core["Idle Tracking"].Enabled = false
            if Roll2 then
                Client.InvokeServer("Bonus Rolls: Claim", {})
            end
            if Gifts then
                Client.CollectGift()
            end
            if GrabFruits then
                Client.GrabFruits()
            end
            if Potion then
                Client.Potion()
            end
            if Dig then
                Client.Dig()
            end
            if Collect then
                Client.Collect()
            end
            if Breakables then
                Client.settarget(Client.Nearest())
            end
            if Fruit then
                Client.Fruit()
            end
            if Relics then
                Client.CollectRelics()
            end
        end)
        if not A then
            print(B)
        end
    end
end)

Client.AntiAFK()

local Atlas = loadstring(game:HttpGet("https://raw.githubusercontent.com/JixSo-48/CodeNest/refs/heads/main/UI/Atlas_UI_Library"))()
local UI = Atlas.new({
    Name = "CodeNest: " .. game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name;
    ConfigFolder = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name;
    Credit = "DekuDimz Script developer | UI Made By RoadToGlory#9879"; -- text to appear if player presses the "i" button on their UI (optional)
    Color = Color3.fromRGB(255,0,0); -- theme color for UI (required)
    Bind = "Delete"; -- keybind for toggling the UI, must be a valid KeyCode name
    -- Atlas Loader:
    UseLoader = false; -- whether to use Atlas Loader or not, if set to false than CheckKey and Discord are ignored
    FullName = "CodeNest"; -- works if UseLoader is set to true, can be same as Name argument, shown on loader frame
    CheckKey = function(inputtedKey) -- works if UseLoader is set to true, where inputtedKey is the key inputted by the player
        return true
    end;
    Discord = ""; -- works if UseLoader is set to true, will be copied to clipboard if player presses "Copy Invite" button
})



local AutoRoll = UI:CreatePage("AutoRoll")
local AutoRoll2 = AutoRoll:CreateSection("Features")

local FPS = UI:CreatePage("FPS")
local FPS2 = FPS:CreateSection("Features")

local Pots = UI:CreatePage("Potions")
local Pots2 = Pots:CreateSection("Features")

local Coins = UI:CreatePage("Breakables")
local Coins2 = Coins:CreateSection("Features")

local Fruits = UI:CreatePage("Fruits")
local Fruits2 = Fruits:CreateSection("Features")

local Merchant = UI:CreatePage("Merchants")
local Merchant2 = Merchant:CreateSection("Features")

local Basic = UI:CreatePage("Vending Machine")
local Misc = Basic:CreateSection("Features")

local hello = UI:CreatePage("Destroy UI")
local Nig = hello:CreateSection("Destroy")


FPS2:CreateToggle({Name = "Disable 3D Rendering"; Flag = "D3"; Default = false;
	Callback = function(Value)
		if Value then
			RunService:Set3dRenderingEnabled(false)
		elseif not Value then
			RunService:Set3dRenderingEnabled(true)
		end
	end;
	Warning = "";
	WarningIcon = 12345; 
    CallbackOnCreation = true;
})


FPS2:CreateSliderToggle({Name = "FPS"; SliderFlag = "FPSFf"; ToggleFlag = "Toggle";Min = 5;Max = 240;AllowOutOfRange = true;Digits = 2;SliderDefault = 100;ToggleDefault = false;
	SliderCallback = function(newValue)
		if YesFPS then
			setfpscap(tonumber(newValue))
		end
	end;
	ToggleCallback = function(newValue) 
		YesFPS = newValue
	end;
	Warning = "This has a warning";
	WarningIcon = 12345;
	CallbackOnCreation = true;
})

local Item = Coins2:CreateDropdown({ 
	Name = "Coin types"; -- required: name of element
	Callback = function(v) 
		table.insert(BlackListed, v) 
	end;
	Options = Coins;
	ItemSelecting = true; 
	DefaultItemSelected = "";
	Warning = "This has a warning";
	WarningIcon = 12345;
})
local Item2 = Coins2:CreateDropdown({ 
	Name = "BlackListed Coin Types"; -- required: name of element
	Callback = function(v) 
		table.remove(BlackListed, tonumber(v))
	end;
	Options = BlackListed;
	ItemSelecting = true; 
	DefaultItemSelected = "";
	Warning = "This has a warning";
	WarningIcon = 12345;
})

spawn(function()
	while wait() do  
		for i,v in next, Client.Break:GetChildren() do
			if v:IsA("Model") and v:GetAttributes().BreakableID and not table.find(Coins, tostring(v:GetAttributes().BreakableID)) then
				table.insert(Coins, tostring(v:GetAttributes().BreakableID))
			end
		end
		Item:Update(Coins)
		Item2:Update(BlackListed)
		wait()
	end
end)

AutoRoll2:CreateToggle({Name = "Auto Roll"; Flag = "asdfsdfddddddddddfdsfdsf"; Default = false;
	Callback = function(Value)
		Roll3 = Value
	end;
	Warning = "";
	WarningIcon = 12345; 
    CallbackOnCreation = true;
})
AutoRoll2:CreateToggle({Name = "Auto Claim Bonus Roll"; Flag = "asdfsdfdfdsdfdsf"; Default = false;
	Callback = function(Value)
		Roll2 = Value
	end;
	Warning = "";
	WarningIcon = 12345; 
    CallbackOnCreation = true;
})
AutoRoll2:CreateToggle({Name = "Auto Fish"; Flag = "asdfsdfddsad22fdsdfdsf"; Default = false;
	Callback = function(Value)
		StartFishing = Value
	end;
	Warning = "";
	WarningIcon = 12345; 
    CallbackOnCreation = true;
})

Merchant2:CreateToggle({Name = "Auto Grab Merchant Buyable items"; Flag = "asdffsdfdasdhgfdsfdsf"; Default = false;
	Callback = function(Value)
		Mer = Value
	end;
	Warning = "";
	WarningIcon = 12345; 
    CallbackOnCreation = true;
})
Coins2:CreateToggle({Name = "Auto Grab Spawned Fruits"; Flag = "asdffsdfdfdsfdsf"; Default = false;
	Callback = function(Value)
		GrabFruits = Value
	end;
	Warning = "";
	WarningIcon = 12345; 
    CallbackOnCreation = true;
})


Misc:CreateToggle({Name = "Auto Vending Machine"; Flag = "asdffsdcxfdfdsfdsf"; Default = false;
	Callback = function(Value)
		Vending = Value
	end;
	Warning = "";
	WarningIcon = 12345; 
    CallbackOnCreation = true;
})

Coins2:CreateToggle({Name = "Auto Gifts"; Flag = "asdfgdgdffsdfdfdsfdsf"; Default = false;
	Callback = function(Value)
		Gifts = Value
	end;
	Warning = "";
	WarningIcon = 12345; 
    CallbackOnCreation = true;
})
Coins2:CreateToggle({Name = "Auto Pop Bloons"; Flag = "asdddd234324fgdgdffsdfdfdsfdsf"; Default = false;
	Callback = function(Value)
		Bloons = Value
	end;
	Warning = "";
	WarningIcon = 12345; 
    CallbackOnCreation = true;
})

Merchant2:CreateToggle({Name = "Auto Purchase FishMerchant"; Flag = "asdddd234324fgdgdffsdfdfdssdfsdfsdfsdffdsf"; Default = false;
	Callback = function(Value)
		FishMerchant = Value
	end;
	Warning = "";
	WarningIcon = 12345; 
    CallbackOnCreation = true;
})

Fruits2:CreateToggle({Name = "Auto Eat All Fruits"; Flag = "asdfsdfdsf"; Default = false;
	Callback = function(Value)
		Fruit = Value
	end;
	Warning = "";
	WarningIcon = 12345; 
    CallbackOnCreation = true;
})

Pots2:CreateToggle({Name = "Auto Use All Potions"; Flag = "asdfshgfhdfdsf"; Default = false;
	Callback = function(Value)
		Potion = Value
	end;
	Warning = "";
	WarningIcon = 12345; 
    CallbackOnCreation = true;
})

Pots2:CreateToggle({Name = "Auto Craft Pots"; Flag = "asddfgdfgfsdfdfdsfdsf"; Default = false;
	Callback = function(Value)
		AutoCraft = Value
	end;
	Warning = "";
	WarningIcon = 12345; 
    CallbackOnCreation = true;
})

Pots2:CreateSliderToggle({Name = "Craft amount of potions"; SliderFlag = "dfssdfsdssfsdfsdfsdfsfdsfdssdfer"; ToggleFlag = "dfghdssssssjfgjksdsdfsdfh";Min = 1;Max = 30;AllowOutOfRange = false;Digits = 2;SliderDefault = 5;ToggleDefault = false;
	SliderCallback = function(newValue)
		Client.PotionAmount = newValue
	end;
	ToggleCallback = function(newValue) 
		AutoCraft = newValue
	end;
	Warning = "This has a warning";
	WarningIcon = 12345;
	CallbackOnCreation = true;
})


Coins2:CreateToggle({Name = "Auto Dig"; Flag = "a"; Default = false;
	Callback = function(Value)
		Dig = Value
	end;
	Warning = "";
	WarningIcon = 12345; 
    CallbackOnCreation = true;
})

Coins2:CreateToggle({Name = "Auto Breakables"; Flag = "ab"; Default = false;
	Callback = function(Value)
		Breakables = Value
	end;
	Warning = "";
	WarningIcon = 12345; 
    CallbackOnCreation = true;
})

Coins2:CreateToggle({Name = "Auto Collect"; Flag = "abc"; Default = false;
	Callback = function(Value)
		Collect = Value
	end;
	Warning = "";
	WarningIcon = 12345; 
    CallbackOnCreation = true;
})

Coins2:CreateToggle({Name = "Auto Upgrade"; Flag = "abcd"; Default = false;
	Callback = function(Value)
		Upgrade = Value
	end;
	Warning = "";
	WarningIcon = 12345; 
    CallbackOnCreation = true;
})

Coins2:CreateToggle({Name = "Pet Infinite Speed"; Flag = "abcde"; Default = false;
	Callback = function(Value)
		Speedy = Value
	end;
	Warning = "";
	WarningIcon = 12345; 
    CallbackOnCreation = true;
})

Coins2:CreateToggle({Name = "Auto Relics"; Flag = "abcdfsdfsdfe"; Default = false;
	Callback = function(Value)
		Relics = Value
	end;
	Warning = "";
	WarningIcon = 12345; 
    CallbackOnCreation = true;
})

Nig:CreateButton({
	Name = "Destroy?"; -- required: name of element
	Callback = function()  -- required: function to be called when button is pressed
		UI:Destroy()
	end
})
