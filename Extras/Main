local CodeNest = {}
local Global = {}

for i,v in next, game.GetChildren(game) do -- Globalize all Services to make scripting easier
    Global[v.ClassName] = cloneref(v)
end

Global.Player = Global.Players.LocalPlayer
CodeNest.Player = Global.Player

getgenv().C = CodeNest
function CodeNest.GetCharacter()
    return Global.Player.Character
end

function CodeNest.GetHumanoid()
    return Global.Player.Character and Global.Player.Character.FindFirstChild(Global.Player.Character, "Humanoid")
end

function CodeNest.IsLoaded()
    return game:IsLoaded() and CodeNest.Loaded
end

function CodeNest.GetPlayers()
    return Global.Players.GetPlayers(Global.Players)
end

function CodeNest.Mag(P1, P2)
    return (P1.Position - P2.Position).magnitude
end

function CodeNest.WalkTo(Position)
    CodeNest.GetHumanoid():MoveTo(Position)
end

function CodeNest.CreatePath(Model, Position, Table)
    if Model and Position and Table then
        local Travel = Global.PathfindingService:CreatePath(Table or {})
        Travel:ComputeAsync(Model.PrimaryPart.Position, Position)
        return Travel:GetWaypoints()
    end
end

function CodeNest.PathWalkTo(Model, Position, Table)
    local Way = CodeNest:CreatePath(Model, Position, Table)
    for i,v in next, Way do
        CodeNest:GetHumanoid():MoveTo(v.Position)
        CodeNest:GetHumanoid().MoveToFinished:Wait()
    end
end

function CodeNest.Teleport(Model, Position)
    Model.PrimaryPart.CFrame = CFrame.new(Vector3.new(Position))
end

function CodeNest.PlayerTeleport(Position, offset)
    if offset == nil then offset = CFrame.new(0,0,0) end
    Global.Player.Character.PrimaryPart.CFrame = Position * offset
end

function CodeNest.Rejoin()
    Global.TeleportService:Teleport(game.PlaceId)
end

function CodeNest.ServerHop()
    spawn(function()
        while wait(4) do
            local Gay = Global.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. game.PlaceId .. '/servers/Public?sortOrder=Asc&limit=100'))
            for i,v in next, Gay.data do
                if v.playing and v.playing < v.maxPlayers then
                    Global.TeleportService:TeleportToPlaceInstance(game.PlaceId, v.id)
                    break
                end
            end
        end
    end)    
end
function CodeNest.NoClip()
    for i,v in next, Player.Character:GetChildren() do
        if v:IsA("BasePart") then
            if v.CanCollide then
                v.CanCollide = false
            end
        end
    end
end

function CodeNest.Float()
    for i,v in next, Player.Character:GetChildren() do
        if v:IsA("BasePart") then
            v.Velocity = Vector3.new(0,0,0)
        end
    end
end

function CodeNest.GetTool(Name)
    if Player.Backpack:FindFirstChild(Name, true) then
        Player.Character:WaitForChild("Humanoid"):EquipTool(Player.Backpack:FindFirstChild(Name, true))
    end
end

function CodeNest.FindFirstChild(Parent, Child)
    return Parent:FindFirstChild(Child) 
end

function CodeNest.GetDescendants(Parent)
    return Parent:GetDescendants()
end

function CodeNest.WalkSpeed(Speed)
    local OldNameCall = nil
    OldNameCall = hookmetamethod(game, "__newindex", function(A, B, C)
        if A and B == "WalkSpeed" then
            return Speed
        end
        return OldNameCall(A, B, C)
    end)
    sethiddenproperty(CodeNest.GetHumanoid(), "WalkSpeed", Speed)
end


function CodeNest.JumpPowerHeight()
    if CodeNest.GetHumanoid().JumpHeight then
        return "JumpHeight"
    else
        return "JumpPower"
    end
end

function CodeNest.JumpPower(Height)
    local I = CodeNest.JumpPowerHeight()
    local OldNameCall = nil
    OldNameCall = hookmetamethod(game, "__newindex", function(A, B, C)
        if A and B == I then
            return Height
        end
        return OldNameCall(A, B, C)
    end)
    sethiddenproperty(CodeNest.GetHumanoid(), CodeNest.JumpPowerHeight(), Height)
end

return CodeNest
